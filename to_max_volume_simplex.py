import numpy as np

def to_max_volume_simplex(A: np.ndarray) -> np.ndarray:
    """
    Преобразует матрицу (-1/1) в матрицу (0/1) для симплекса максимального объема.
    """
    order = A.shape[0]
    n = order - 1
    
    # Шаг 1: Умножаем столбцы, начинающиеся с -1, на -1
    B = A.copy()
    for j in range(order):
        if B[0, j] == -1:
            B[:, j] *= -1
    
    # Шаг 2: Умножаем строки, начинающиеся с -1, на -1
    for i in range(order):
        if B[i, 0] == -1:
            B[i, :] *= -1
    
    # Шаг 3: Получаем подматрицу и заменяем элементы
    C = B[1:, 1:]  # Подматрица без первой строки и первого столбца
    D = np.where(C == -1, 1, 0)  # Заменяем -1 на 1, 1 на 0

    # Шаг 4: Добавляем столбец из 1 справа и строку из 0 снизу
    zeros_row = np.zeros((1, n), dtype=int)  # Строка из 0 для добавления снизу
    ones_column = np.ones((n + 1, 1), dtype=int)  # Столбец из 1 для добавления справа

    D = np.vstack([D, zeros_row])  # Добавляем строку 0 вниз
    D = np.hstack([D, ones_column])  # Добавляем столбец 1 справа
    
    return D